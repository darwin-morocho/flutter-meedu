(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1370],{3905:function(e,r,t){"use strict";t.d(r,{Zo:function(){return d},kt:function(){return m}});var n=t(7294);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function i(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function a(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?i(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function s(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=n.createContext({}),l=function(e){var r=n.useContext(c),t=r;return e&&(t="function"==typeof e?e(r):a(a({},r),e)),t},d=function(e){var r=l(e.components);return n.createElement(c.Provider,{value:r},e.children)},p={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},u=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=l(t),m=o,g=u["".concat(c,".").concat(m)]||u[m]||p[m]||i;return t?n.createElement(g,a(a({ref:r},d),{},{components:t})):n.createElement(g,a({ref:r},d))}));function m(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=u;var s={};for(var c in r)hasOwnProperty.call(r,c)&&(s[c]=r[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var l=2;l<i;l++)a[l]=t[l];return n.createElement.apply(null,a)}return n.createElement.apply(null,t)}u.displayName="MDXCreateElement"},1625:function(e,r,t){"use strict";t.r(r),t.d(r,{frontMatter:function(){return a},metadata:function(){return s},toc:function(){return c},default:function(){return d}});var n=t(2122),o=t(9756),i=(t(7294),t(3905)),a={sidebar_position:8},s={unversionedId:"state-management/testing",id:"state-management/testing",isDocsHomePage:!1,title:"Testing",description:"Overriding providers",source:"@site/i18n/es/docusaurus-plugin-content-docs/current/state-management/testing.md",sourceDirName:"state-management",slug:"/state-management/testing",permalink:"/es/docs/state-management/testing",editUrl:"https://github.com/darwin-morocho/flutter-meedu/edit/master/website/i18n/es/docusaurus-plugin-content-docs/current",version:"current",lastUpdatedBy:"Walter Gerez",lastUpdatedAt:1665149378,formattedLastUpdatedAt:"7/10/2022",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"mySidebar",previous:{title:"Listen when a provider has disposed a Notifier",permalink:"/es/docs/state-management/listen-when-a-provider-dispose-a-notifier"},next:{title:"Inyecci\xf3n de dependencias",permalink:"/es/docs/dependency-injection"}},c=[{value:"Overriding providers",id:"overriding-providers",children:[]},{value:"Reseteando sus providers",id:"reseteando-sus-providers",children:[]}],l={toc:c};function d(e){var r=e.components,t=(0,o.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,n.Z)({},l,t,{components:r,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"overriding-providers"},"Overriding providers"),(0,i.kt)("p",null,"Considere el siguiente provider"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-dart"},"final loginProvider = StateProvider<LoginController, LoginState>(\n  (_) => LoginController(),\n);\n")),(0,i.kt)("p",null,"En sus tests si necesita sobreescribir el callback de su provider\npara pasar datos mockeados a sus Notifier puede usar el m\xe9todo ",(0,i.kt)("inlineCode",{parentName:"p"},"overrideProvider"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-dart"},"import 'package:mocktail/mocktail.dart';\n\nfinal loginProvider = StateProvider<LoginController, LoginState>(\n  (_) => LoginController(),\n);\n\nclass MockLoginController extends Mock implements LoginController {}\n")),(0,i.kt)("p",null,"Antes de sus test puede usar un ",(0,i.kt)("inlineCode",{parentName:"p"},"setUp")," y sobreescribir el callback de su provider."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-dart"},"setUp((){\n  loginProvider.overrideProvider(\n    (_) => MockLoginController(),\n  );\n});\n")),(0,i.kt)("h2",{id:"reseteando-sus-providers"},"Reseteando sus providers"),(0,i.kt)("p",null,"Antes o despues de cada uno de sus tests necesitara reiniciar sus providers a sus valores\npor defecto para esto utilice ",(0,i.kt)("inlineCode",{parentName:"p"},"ProviderScope.clear();")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-dart"},"setUp((){\n  ProviderScope.clear();\n});\n\nor \n\n\ntearDown((){\n  ProviderScope.clear();\n});\n")))}d.isMDXComponent=!0}}]);