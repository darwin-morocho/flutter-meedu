(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9707],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return p},kt:function(){return m}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),m=o,g=u["".concat(s,".").concat(m)]||u[m]||d[m]||i;return n?r.createElement(g,a(a({ref:t},p),{},{components:n})):r.createElement(g,a({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var c=2;c<i;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},2042:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return a},metadata:function(){return l},toc:function(){return s},default:function(){return p}});var r=n(2122),o=n(9756),i=(n(7294),n(3905)),a={sidebar_position:8},l={unversionedId:"state-management/testing",id:"version-5.x.x/state-management/testing",isDocsHomePage:!1,title:"Testing",description:"Overriding providers",source:"@site/versioned_docs/version-5.x.x/state-management/testing.md",sourceDirName:"state-management",slug:"/state-management/testing",permalink:"/es/docs/5.x.x/state-management/testing",editUrl:"https://github.com/darwin-morocho/flutter-meedu/edit/master/website/i18n/es/versioned_docs/version-5.x.x/state-management/testing.md",version:"5.x.x",lastUpdatedBy:"Darwin",lastUpdatedAt:1645446089,formattedLastUpdatedAt:"21/2/2022",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"version-5.x.x/mySidebar",previous:{title:"Listen when a provider has disposed a Notifier",permalink:"/es/docs/5.x.x/state-management/listen-when-a-provider-dispose-a-notifier"},next:{title:"Dependency Injection",permalink:"/es/docs/5.x.x/dependency-injection"}},s=[{value:"Overriding providers",id:"overriding-providers",children:[]},{value:"Cleaning your providers",id:"cleaning-your-providers",children:[]}],c={toc:s};function p(e){var t=e.components,n=(0,o.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"overriding-providers"},"Overriding providers"),(0,i.kt)("p",null,"Consider the next provider"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-dart"},"final loginProvider = StateProvider<LoginController, LoginState>(\n  (_) => LoginController(),\n);\n")),(0,i.kt)("p",null,"So, maybe in one test you need mock the LoginController behavior then you can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"overrideProvider")," method."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-dart"},"import 'package:mocktail/mocktail.dart';\n\nfinal loginProvider = StateProvider<LoginController, LoginState>(\n  (_) => LoginController(),\n);\n\nclass MockLoginController extends Mock implements LoginController {}\n")),(0,i.kt)("p",null,"Next before your test you can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"setUp")," method."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-dart"},"setUp((){\n  loginProvider.overrideProvider(\n    (_) => MockLoginController(),\n  );\n});\n")),(0,i.kt)("h2",{id:"cleaning-your-providers"},"Cleaning your providers"),(0,i.kt)("p",null,"Before or after each test you will need the default state of all SimpleNotifier or StateNotifier. So you can use ",(0,i.kt)("inlineCode",{parentName:"p"},"ProviderScope.clear();")," to clear all provider saved in the ProviderScope."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-dart"},"setUp((){\n  ProviderScope.clear();\n});\n\nor \n\n\ntearDown((){\n  ProviderScope.clear();\n});\n")))}p.isMDXComponent=!0}}]);