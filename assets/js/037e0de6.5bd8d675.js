(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2447],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return p},kt:function(){return c}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var d=a.createContext({}),l=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=l(e.components);return a.createElement(d.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,d=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(n),c=i,g=u["".concat(d,".").concat(c)]||u[c]||m[c]||r;return n?a.createElement(g,o(o({ref:t},p),{},{components:n})):a.createElement(g,o({ref:t},p))}));function c(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=u;var s={};for(var d in t)hasOwnProperty.call(t,d)&&(s[d]=t[d]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var l=2;l<r;l++)o[l]=n[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},722:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return o},metadata:function(){return s},toc:function(){return d},default:function(){return p}});var a=n(2122),i=n(9756),r=(n(7294),n(3905)),o={sidebar_position:2},s={unversionedId:"state-management/inmutable-states",id:"state-management/inmutable-states",isDocsHomePage:!1,title:"Inmutable States",description:"Meedu is designed to streamline state management for both simple and complex apps, emphasizing the use of immutable state.",source:"@site/docs/state-management/inmutable-states.md",sourceDirName:"state-management",slug:"/state-management/inmutable-states",permalink:"/docs/state-management/inmutable-states",editUrl:"https://github.com/darwin-morocho/flutter-meedu/edit/master/website/docs/state-management/inmutable-states.md",version:"current",lastUpdatedBy:"darwin-morocho",lastUpdatedAt:1697048754,formattedLastUpdatedAt:"10/11/2023",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"mySidebar",previous:{title:"StateNotifier",permalink:"/docs/state-management/state-notifier"},next:{title:"Avoid rebuilds using filters",permalink:"/docs/state-management/filters"}},d=[{value:"With equatable",id:"with-equatable",children:[]},{value:"With freezed",id:"with-freezed",children:[]},{value:"ConsumerWidget",id:"consumerwidget",children:[]},{value:"Listen to changes in our notifiers without rebuilding the UI",id:"listen-to-changes-in-our-notifiers-without-rebuilding-the-ui",children:[]}],l={toc:d};function p(e){var t=e.components,n=(0,i.Z)(e,["components"]);return(0,r.kt)("wrapper",(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Meedu is designed to streamline state management for both simple and complex apps, emphasizing the use of immutable state."),(0,r.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"An immutable state is an instance of one Class that overrides ",(0,r.kt)("inlineCode",{parentName:"p"},"==")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"hashCode"),". For example you could use ",(0,r.kt)("a",{parentName:"p",href:"https://pub.dev/packages/equatable"},"equatable")," or ",(0,r.kt)("a",{parentName:"p",href:"https://pub.dev/packages/freezed"},"freezed")," to create an immutable Class."))),(0,r.kt)("h3",{id:"with-equatable"},"With equatable"),(0,r.kt)("p",null,"Add equatable as a dependency in your ",(0,r.kt)("inlineCode",{parentName:"p"},"pubspec.yaml")," file"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"equatable: latest_version\n")),(0,r.kt)("p",null,"Now you can create a Class to manage your state"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"import 'package:equatable/equatable.dart';\n\nclass LoginState extends Equatable {\n  final String email, password;\n  LoginState({\n    required this.email,\n    required this.password,\n  });\n\n  LoginState copyWith({\n    String? email,\n    String? password,\n  }) {\n    return LoginState(\n      email: email ?? this.email,\n      password: password ?? this.password,\n    );\n  }\n\n  @override\n  List<Object?> get props => [email, password];\n}\n")),(0,r.kt)("h3",{id:"with-freezed"},"With freezed"),(0,r.kt)("p",null,"To use freezed you need ",(0,r.kt)("a",{parentName:"p",href:"https://pub.dev/packages/build_runner"},"build_runner")," and ",(0,r.kt)("a",{parentName:"p",href:"https://pub.dev/packages/freezed_annotation"},"freezed_annotation")),(0,r.kt)("p",null,"in your ",(0,r.kt)("inlineCode",{parentName:"p"},"pubspec.yaml")," file (replace ",(0,r.kt)("inlineCode",{parentName:"p"},"latest_version")," with the latest version of each dependency)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"dependencies:\n  flutter:\n    sdk: flutter\n  freezed_annotation: latest_version\n\ndev_dependencies:\n  flutter_test:\n    sdk: flutter\n\n  build_runner: latest_version\n  freezed: latest_version\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"import 'package:freezed_annotation/freezed_annotation.dart';\npart 'login_state.freezed.dart';\n@freezed\nclass LoginState with _$LoginState {\n  const LoginState._();\n  const factory LoginState({\n    required String email,\n    required String password,\n  }) = _LoginState;\n}\n")),(0,r.kt)("p",null,"Now you can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"LoginState")," class to create a ",(0,r.kt)("inlineCode",{parentName:"p"},"StateNotifier")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"import 'package:flutter_meedu/notifiers.dart';\n\nclass LoginNotifier extends StateNotifier<LoginState> {\n  // you need pass an inital state using super\n  LoginNotifie(super.initialState);\n\n  void onEmailChanged(String email) {\n    state = state.copyWith(email: email);\n  }\n\n  void onPasswordChanged(String password) {\n    state = state.copyWith(password: password);\n  }\n}\n")),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"If you only want to update the state of your ",(0,r.kt)("inlineCode",{parentName:"p"},"StateNotifier")," but you don't want to notify to the listeners (don't rebuild the ",(0,r.kt)("inlineCode",{parentName:"p"},"Consumer")," widgets)\nyou can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"onlyUpdate")," method in your ",(0,r.kt)("inlineCode",{parentName:"p"},"StateNotifier"),"."),(0,r.kt)("pre",{parentName:"div"},(0,r.kt)("code",{parentName:"pre",className:"language-dart",metastring:"{7}","{7}":!0},"class LoginNotifier extends StateNotifier<LoginState> {\n  LoginNotifie(super.initialState);\n\n  void onEmailChanged(String email) {\n    // only update the state\n    onlyUpdate(state.copyWith(email: email));\n  }\n  .\n  .\n  .\n\n}\n")))),(0,r.kt)("p",null,"Next you need to create a ",(0,r.kt)("inlineCode",{parentName:"p"},"StateNotifierProvider")," and use the ",(0,r.kt)("inlineCode",{parentName:"p"},"Consumer")," widget to listen the changes in your state"),(0,r.kt)("p",null,"Consider the following Login Form UI, where the ",(0,r.kt)("inlineCode",{parentName:"p"},"ElevatedButton")," is enabled only when both the email and password in our state are not empty."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"import 'package:flutter/material.dart';\nimport 'package:flutter_meedu/providers.dart';\nimport 'package:flutter_meedu/consumer.dart';\n\n\nfinal loginProvider = StateProvider<LoginNotifier, LoginState>(\n  (_) => LoginController(\n    LoginState(\n      email: '',\n      password:'',\n    ),\n  ),\n);\n\n\nclass LoginView extends StatelessWidget {\n  const LoginView({Key? key}) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: SafeArea(\n        child: Padding(\n          padding: const EdgeInsets.all(8.0),\n          child: Column(\n            children: [\n              TextField(\n                onChanged: loginProvider.read().onEmailChanged,\n                decoration: InputDecoration(\n                  labelText: \"Email\",\n                ),\n              ),\n              TextField(\n                onChanged: loginProvider.read().onPasswordChanged,\n                decoration: InputDecoration(\n                  labelText: \"Password\",\n                ),\n              ),\n              SizedBox(height: 30),\n              Consumer(\n                builder: (_, ref, __) {\n                  final notifier = ref.watch(loginProvider);\n                  final state = notifier.state;\n\n                  final email = state.email;\n                  final password = state.password;\n\n                  final enabled = email.isNotEmpty && password.isNotEmpty;\n\n                  return ElevatedButton(\n                    onPressed: enabled\n                        ? () {\n                            // YOUR CODE HERE\n                          }\n                        : null,\n                    child: Text(\"SEND\"),\n                  );\n                },\n              )\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}\n")),(0,r.kt)("h2",{id:"consumerwidget"},"ConsumerWidget"),(0,r.kt)("p",null,"Also you can extend from ",(0,r.kt)("inlineCode",{parentName:"p"},"ConsumerWidget")," to create a widget and listen the changes in your notifier"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"import 'package:flutter/material.dart';\nimport 'package:flutter_meedu/consumer.dart';\n\nclass CounterView extends ConsumerWidget {\n  @override\n  Widget build(BuildContext context, ref) {\n    final controller = ref.watch(counterProvider);\n    return Text(\"${controller.counter}\");\n  }\n}\n\nclass CounterPage extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(),\n      body: Center(\n        child: CounterView(),\n      ),\n      floatingActionButton: FloatingActionButton(\n        onPressed: () {\n          counterProvider.read.increment();\n        },\n      ),\n    );\n  }\n}\n")),(0,r.kt)("div",{className:"admonition admonition-success alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"NOTE")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"ref")," parameter in a ",(0,r.kt)("inlineCode",{parentName:"p"},"Consumer")," or a ",(0,r.kt)("inlineCode",{parentName:"p"},"ConsumerWidget")," can be used to listen multiples providers."),(0,r.kt)("pre",{parentName:"div"},(0,r.kt)("code",{parentName:"pre",className:"language-dart"},'class CounterView extends ConsumerWidget {\n  @override\n  Widget build(BuildContext context, ref) {\n    final counterNotifier = ref.watch(counterProvider);\n    final loginNotifier = ref.watch(loginProvider);\n    return Text("${counterNotifier.state} ${loginNotifier.state.email}");\n  }\n}\n')))),(0,r.kt)("h2",{id:"listen-to-changes-in-our-notifiers-without-rebuilding-the-ui"},"Listen to changes in our notifiers without rebuilding the UI"),(0,r.kt)("p",null,"Sometimes we need to listen the changes in our state and perform some actions like showing a dialog, snackback, or navigation. In those cases, you can use ",(0,r.kt)("inlineCode",{parentName:"p"},"ref.listen")," inside a ",(0,r.kt)("inlineCode",{parentName:"p"},"Consumer")," or a ",(0,r.kt)("inlineCode",{parentName:"p"},"ConsumerWidget"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"class CounterView extends ConsumerWidget {\n  @override\n  Widget build(BuildContext context, ref) {\n\n    ref.listen(\n      loginProvider,\n      callback: (notifier) {\n        // YOUR ACTION HERE\n      },\n    );\n   \n    return MY_WIDGET;\n  }\n}\n")),(0,r.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},(0,r.kt)("inlineCode",{parentName:"p"},"ref.listen")," only listens the changes in our state but does not rebuild our ",(0,r.kt)("inlineCode",{parentName:"p"},"Consumer")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"ConsumerWidget"),"."))))}p.isMDXComponent=!0}}]);