(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1367],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return l},kt:function(){return g}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=r.createContext({}),c=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=c(e.components);return r.createElement(u.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,u=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=c(n),g=a,d=p["".concat(u,".").concat(g)]||p[g]||m[g]||o;return n?r.createElement(d,i(i({ref:t},l),{},{components:n})):r.createElement(d,i({ref:t},l))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=p;var s={};for(var u in t)hasOwnProperty.call(t,u)&&(s[u]=t[u]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},96:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return i},metadata:function(){return s},toc:function(){return u},default:function(){return l}});var r=n(2122),a=n(9756),o=(n(7294),n(3905)),i={sidebar_position:5},s={unversionedId:"state-management/working-with-arguments",id:"state-management/working-with-arguments",isDocsHomePage:!1,title:"Working with arguments",description:"Sometimes you need to pass initial values to your StateNotifier. In such cases, you can use the StateNotifierArgumentsProvider class and call the setArguments function to set argument values that will be retrieved in the creator callback of your provider.",source:"@site/docs/state-management/working-with-arguments.md",sourceDirName:"state-management",slug:"/state-management/working-with-arguments",permalink:"/docs/state-management/working-with-arguments",editUrl:"https://github.com/darwin-morocho/flutter-meedu/edit/master/website/docs/state-management/working-with-arguments.md",version:"current",lastUpdatedBy:"darwin-morocho",lastUpdatedAt:1697048754,formattedLastUpdatedAt:"10/11/2023",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"mySidebar",previous:{title:"BLoC pattern",permalink:"/docs/state-management/bloc-pattern"},next:{title:"Working with tags",permalink:"/docs/state-management/working-with-tags"}},u=[],c={toc:u};function l(e){var t=e.components,n=(0,a.Z)(e,["components"]);return(0,o.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Sometimes you need to pass initial values to your ",(0,o.kt)("inlineCode",{parentName:"p"},"StateNotifier"),". In such cases, you can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"StateNotifierArgumentsProvider")," class and call the ",(0,o.kt)("inlineCode",{parentName:"p"},"setArguments")," function to set argument values that will be retrieved in the creator callback of your provider."),(0,o.kt)("p",null,"Next, you can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"ref")," parameter of your callback generator to access the arguments passed in the ",(0,o.kt)("inlineCode",{parentName:"p"},"initState")," method."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart",metastring:"{4,24}","{4,24}":!0},"final loginProvider = Provider.stateArguments<LoginNotifier, LoginState, String>(\n  (ref) => LoginNotifier(\n    LoginState(\n      email: ref.arguments, // here ref.arguments is a String\n      password: '',\n    ),\n  ),\n);\n\n\nclass LoginPage extends StatefulWidget {\n  const LoginPage({Key? key}) : super(key: key);\n\n  @override\n  _LoginPageState createState() => _LoginPageState();\n}\n\nclass _LoginPageState extends State<LoginPage> {\n  @override\n  void initState() {\n    super.initState();\n    // you must set your arguments\n    // before call loginProvider.read or before use watch(loginProvider)\n    loginProvider.setArguments(\"initial@email.com\");\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    // YOUR CODE HERE\n  }\n}\n")))}l.isMDXComponent=!0}}]);