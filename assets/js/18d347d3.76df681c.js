(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[473],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return s},kt:function(){return m}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),d=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},s=function(e){var n=d(e.components);return r.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=d(t),m=o,h=p["".concat(c,".").concat(m)]||p[m]||u[m]||i;return t?r.createElement(h,a(a({ref:n},s),{},{components:t})):r.createElement(h,a({ref:n},s))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=p;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var d=2;d<i;d++)a[d]=t[d];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},4015:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return a},metadata:function(){return l},toc:function(){return c},default:function(){return s}});var r=t(2122),o=t(9756),i=(t(7294),t(3905)),a={sidebar_position:3},l={unversionedId:"simple-notifier",id:"simple-notifier",isDocsHomePage:!1,title:"SimpleNotifier",description:"Just create a class that extends of SimpleNotifier",source:"@site/docs/simple-notifier.md",sourceDirName:".",slug:"/simple-notifier",permalink:"/docs/simple-notifier",editUrl:"https://github.com/darwin-morocho/flutter-meedu/edit/master/website/docs/simple-notifier.md",version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"State Managment",permalink:"/docs/state-managment"},next:{title:"StateNotifier",permalink:"/docs/state-notifier"}},c=[{value:"<strong>SimpleProvider</strong>",id:"simpleprovider",children:[{value:"Listen the changes in your Controller",id:"listen-the-changes-in-your-controller",children:[]},{value:"watch method with WatchFilter",id:"watch-method-with-watchfilter",children:[]}]}],d={toc:c};function s(e){var n=e.components,t=(0,o.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Just create a class that extends of ",(0,i.kt)("inlineCode",{parentName:"p"},"SimpleNotifier")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-dart"},"import 'package:flutter_meedu/meedu.dart';\n\nclass CounterController extends SimpleNotifier{\n    int _counter = 0;\n    int get counter => _counter;\n\n    void increment(){\n        _counter++;\n        notify(); // notify to all listeners\n    }\n \n    // override the next method is OPTIONAL\n    @override\n    void onDispose() {\n      // YOUR CODE HERE\n      super.onDispose();// <-- you must call to the super method\n    }\n}\n")),(0,i.kt)("h2",{id:"simpleprovider"},(0,i.kt)("strong",{parentName:"h2"},"SimpleProvider")),(0,i.kt)("p",null,"Now you need to create a ",(0,i.kt)("inlineCode",{parentName:"p"},"provider")," as a global variable using the ",(0,i.kt)("inlineCode",{parentName:"p"},"SimpleProvider")," class."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-dart"},"final counterProvider = SimpleProvider(\n  (ref) => CounterController(),\n);\n")),(0,i.kt)("p",null,"Now you can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"Consumer")," widget to read your ",(0,i.kt)("inlineCode",{parentName:"p"},"CounterController"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-dart"},"import 'package:flutter_meedu/state.dart';\nimport 'package:flutter_meedu/meedu.dart';\n\nfinal counterProvider = SimpleProvider(\n  (ref) => CounterController(),\n);\n\nclass CounterPage extends StatelessWidget {\n  const CounterPage({Key? key}) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: Center(\n        // The Consumer widget listen the changes in your CounterController\n        // and rebuild the widget when is need it\n        child: Consumer(builder: (_, watch, __) {\n          final controller = watch(counterProvider);\n          return Text(\"${controller.counter}\");\n        }),\n      ),\n      floatingActionButton: FloatingActionButton(\n        onPressed: () {\n          // you can use the read method to access to your CounterController\n          counterProvider.read.increment();\n        },\n      ),\n    );\n  }\n}\n")),(0,i.kt)("p",null,"By default the ",(0,i.kt)("inlineCode",{parentName:"p"},"counterProvider")," variable doesn't create one instance of ",(0,i.kt)("inlineCode",{parentName:"p"},"CounterController")," until it is need it. In this case the ",(0,i.kt)("inlineCode",{parentName:"p"},"Consumer"),"\nwidget call to the ",(0,i.kt)("inlineCode",{parentName:"p"},"read")," method of our ",(0,i.kt)("inlineCode",{parentName:"p"},"counterProvider")," and check if the ",(0,i.kt)("inlineCode",{parentName:"p"},"CounterController")," was created and return the ",(0,i.kt)("inlineCode",{parentName:"p"},"CounterController")," that was created before or create a new ",(0,i.kt)("inlineCode",{parentName:"p"},"CounterController"),"."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"onDispose")," method in our ",(0,i.kt)("inlineCode",{parentName:"p"},"CounterController")," will be called when the ",(0,i.kt)("inlineCode",{parentName:"p"},"route")," who created the ",(0,i.kt)("inlineCode",{parentName:"p"},"CounterController")," is popped."),(0,i.kt)("p",null,"If you don't want to call to the ",(0,i.kt)("inlineCode",{parentName:"p"},"onDispose")," method when the ",(0,i.kt)("inlineCode",{parentName:"p"},"route")," who created the ",(0,i.kt)("inlineCode",{parentName:"p"},"CounterController")," is popped you could use."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-dart",metastring:"{3}","{3}":!0},"final counterProvider = SimpleProvider(\n  (ref) => CounterController(),\n  autoDispose: false,// <-- ADD THIS TO DISABLE THE AUTO DISPOSE\n);\n")),(0,i.kt)("div",{className:"admonition admonition-danger alert alert--danger"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"danger")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"When you disable the ",(0,i.kt)("inlineCode",{parentName:"p"},"autoDispose")," of your ",(0,i.kt)("inlineCode",{parentName:"p"},"provider")," you need to handle it manually. For example "))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-dart",metastring:"{18}","{18}":!0},'final counterProvider = SimpleProvider(\n  (ref) => CounterController(),\n  autoDispose: false,\n);\n\nclass CounterPage extends StatefulWidget {\n  const CounterPage({Key? key}) : super(key: key);\n  @override\n  _CounterPageState createState() => _CounterPageState();\n}\n\nclass _CounterPageState extends State<CounterPage> {\n  @override\n  void dispose() {\n    // handle the dispose event manually\n    // check if the provider has a Controller created before\n    if (counterProvider.mounted) {\n      counterProvider.dispose();\n    }\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: Center(\n        child: Consumer(builder: (_, watch, __) {\n          final controller = watch(counterProvider);\n          return Text("${controller.counter}");\n        }),\n      ),\n      floatingActionButton: FloatingActionButton(\n        onPressed: () {\n          counterProvider.read.increment();\n        },\n      ),\n    );\n  }\n}\n')),(0,i.kt)("h3",{id:"listen-the-changes-in-your-controller"},"Listen the changes in your Controller"),(0,i.kt)("p",null,"You could use the ",(0,i.kt)("inlineCode",{parentName:"p"},"ProviderListener")," Widget to listen the changes in our ",(0,i.kt)("inlineCode",{parentName:"p"},"CounterController")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-dart",metastring:"{3-7}","{3-7}":!0},' ProviderListener<CounterController>(\n      provider: counterProvider,\n      onChange: (context, controller) {\n        // YOUR CODE HERE\n        // This method is called every time that one Instance\n        // of our CounterController calls to the notify() method\n      },\n      builder: (_, controller) => Scaffold(\n        body: Center(\n          // The Consumer widget listen the changes in your CounterController\n          // and rebuild the widget when is need it\n          child: Consumer(\n            builder: (_, watch, __) {\n              final controller = watch(counterProvider);\n              return Text("${controller.counter}");\n            },\n          ),\n        ),\n        floatingActionButton: FloatingActionButton(\n          onPressed: () {\n            // you can use the read method to access to your CounterController\n            counterProvider.read.increment();\n          },\n        ),\n      ),\n    )\n')),(0,i.kt)("p",null,"Or you can listen the changes in your SimpleProvider as a ",(0,i.kt)("inlineCode",{parentName:"p"},"StreamSubscription")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-dart",metastring:"{1,5-7,12}","{1,5-7,12}":!0},"  StreamSubscription? _subscription;\n  @override\n  void initState() {\n    super.initState();\n    _subscription = counterProvider.read.stream.listen((_) {\n      // YOUR CODE HERE\n    });\n  }\n\n  @override\n  void dispose() {\n    _subscription?.cancel();\n    super.dispose();\n  }\n")),(0,i.kt)("h3",{id:"watch-method-with-watchfilter"},"watch method with WatchFilter"),(0,i.kt)("p",null,"If you have multiples ",(0,i.kt)("inlineCode",{parentName:"p"},"Consumer")," widgets in View and you only want rebuild certain Consumer you can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"WatchFilter")),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"When you use the ",(0,i.kt)("inlineCode",{parentName:"p"},"WatchFilter")," class you need to define the ",(0,i.kt)("strong",{parentName:"p"},"generic types")," in the ",(0,i.kt)("inlineCode",{parentName:"p"},"watch")," method.\nThe second generic type in the next code in our ",(0,i.kt)("inlineCode",{parentName:"p"},"WatchFilter")," is a ",(0,i.kt)("inlineCode",{parentName:"p"},"List")," beacuse we are using a list of strings (ids) to listen the changes."))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-dart",metastring:"{8,21,23}","{8,21,23}":!0},"class CounterController extends SimpleNotifier {\n  int _counter = 0;\n  int get counter => _counter;\n\n  void increment() {\n    _counter++;\n    // notify to all listeners but only rebuild the widgets with the id 'text'\n    notify(['text']);\n  }\n}\n\n.\n.\n.\n\nScaffold(\n  body: Column(\n    children: [\n      Consumer(\n        builder: (_, watch, __) {\n          final controller = watch<CounterController, List>(\n            counterProvider,\n            WatchFilter(ids: ['text']),\n          );\n          return Text(\"${controller.counter}\");\n        },\n      ),\n      Consumer(\n        builder: (_, watch, __) {\n          final controller = watch(counterProvider);\n          return Text(\"${controller.counter}\");\n        },\n      )\n    ],\n  ),\n  floatingActionButton: FloatingActionButton(\n    onPressed: () {\n      // you can use the read method to access to your CounterController\n      counterProvider.read.increment();\n    },\n  ),\n)\n")),(0,i.kt)("p",null,"If you don't want to use ",(0,i.kt)("inlineCode",{parentName:"p"},"ids")," to rebuild your ",(0,i.kt)("inlineCode",{parentName:"p"},"Consumer")," you can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"select")," param in the ",(0,i.kt)("inlineCode",{parentName:"p"},"WatchFilter")," instance.\nThe next code rebuilds the first ",(0,i.kt)("inlineCode",{parentName:"p"},"Consumer")," only when the counter is highest than 5."),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"The second ",(0,i.kt)("strong",{parentName:"p"},"generic type")," in the next code in our ",(0,i.kt)("inlineCode",{parentName:"p"},"WatchFilter")," is a ",(0,i.kt)("inlineCode",{parentName:"p"},"bool")," beacuse we are using a ",(0,i.kt)("strong",{parentName:"p"},"boolean condition")," to listen the changes."))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-dart",metastring:"{19,21}","{19,21}":!0},'class CounterController extends SimpleNotifier {\n  int _counter = 0;\n  int get counter => _counter;\n\n  void increment() {\n    _counter++;\n    notify();\n  }\n}\n\n.\n.\n.\n\nScaffold(\n  body: Center(\n    child: Consumer(\n        builder: (_, watch, __) {\n          final controller = watch<CounterController, bool>(\n            counterProvider,\n            WatchFilter(select: (controller) => controller.counter > 5),\n          );\n          return Text("${controller.counter}");\n        },\n    )\n  ),\n  floatingActionButton: FloatingActionButton(\n    onPressed: () {\n      // you can use the read method to access to your CounterController\n      counterProvider.read.increment();\n    },\n  ),\n)\n')))}s.isMDXComponent=!0}}]);