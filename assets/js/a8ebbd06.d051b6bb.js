(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[389],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return c},kt:function(){return m}});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=r.createContext({}),d=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},c=function(e){var n=d(e.components);return r.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=d(t),m=i,g=p["".concat(s,".").concat(m)]||p[m]||u[m]||o;return t?r.createElement(g,a(a({ref:n},c),{},{components:t})):r.createElement(g,a({ref:n},c))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,a=new Array(o);a[0]=p;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,a[1]=l;for(var d=2;d<o;d++)a[d]=t[d];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},988:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return a},metadata:function(){return l},toc:function(){return s},default:function(){return c}});var r=t(2122),i=t(9756),o=(t(7294),t(3905)),a={sidebar_position:6},l={unversionedId:"working-with-tags",id:"working-with-tags",isDocsHomePage:!1,title:"Working with tags",description:"If you need to have multiples providers using the same SimpleNotifier or StateNotifier class but you don't want create a provider for each notifier you could use the withTag method to create multiples providers for a single Notifier class with its own state.",source:"@site/docs/working-with-tags.md",sourceDirName:".",slug:"/working-with-tags",permalink:"/docs/working-with-tags",editUrl:"https://github.com/darwin-morocho/flutter-meedu/edit/master/website/docs/working-with-tags.md",version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Working with arguments",permalink:"/docs/working-with-arguments"},next:{title:"Listen when a provider has disposed a Notifier",permalink:"/docs/listen-when-a-provider-dispose-a-notifier"}},s=[],d={toc:s};function c(e){var n=e.components,t=(0,i.Z)(e,["components"]);return(0,o.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"If you need to have multiples providers using the same ",(0,o.kt)("inlineCode",{parentName:"p"},"SimpleNotifier")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"StateNotifier")," class but you don't want create a provider for each notifier you could use the ",(0,o.kt)("inlineCode",{parentName:"p"},"withTag")," method to create multiples providers for a single Notifier class with its own state."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"class CounterController extends SimpleNotifier {\n  int counter = 0;\n  void increment() {\n    counter++;\n    notify();\n  }\n}\n")),(0,o.kt)("p",null,"Now you can create yours provider using ",(0,o.kt)("inlineCode",{parentName:"p"},"SimpleProvider.withTag")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"StateProvider.withTag")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart",metastring:"{1-3,21-24,27-30,55,69}","{1-3,21-24,27-30,55,69}":!0},"final counterProviderWithTag = SimpleProvider.withTag(\n  (_) => CounterController(),\n);\n\n\nclass SimpleTagPage extends StatelessWidget {\n  const SimpleTagPage({Key? key}) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(),\n      body: SafeArea(\n        child: Container(\n          width: double.infinity,\n          height: double.infinity,\n          child: Column(\n            children: [\n              // each SimpleConsumerWithTag has their own state\n              Expanded(\n                child: SimpleConsumerWithTag(\n                  tagName: 'counter1',\n                  color: Colors.black26,\n                ),\n              ),\n              Expanded(\n                child: SimpleConsumerWithTag(\n                  tagName: 'counter2',\n                  color: Colors.redAccent.withOpacity(0.3),\n                ),\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}\n\nclass SimpleConsumerWithTag extends StatelessWidget {\n  final String tagName;\n  final Color color;\n  const SimpleConsumerWithTag({\n    Key? key,\n    required this.tagName,\n    required this.color,\n  }) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    return Consumer(\n      builder: (_, watch, __) {\n        // the find method creates a new unique provider using a string as key\n        final controller = watch(\n          counterProviderWithTag.find(tagName),\n        );\n        final counter = controller.counter;\n        return Container(\n          color: this.color,\n          alignment: Alignment.center,\n          child: Column(\n            mainAxisAlignment: MainAxisAlignment.center,\n            children: [\n              Text(\"$counter\"),\n              SizedBox(height: 10),\n              CupertinoButton(\n                color: Colors.blue,\n                onPressed: () {\n                  controller.increment();\n                },\n                child: Text(\"increment\"),\n              ),\n            ],\n          ),\n        );\n      },\n    );\n  }\n}\n")),(0,o.kt)("p",null,"Also you can use ",(0,o.kt)("inlineCode",{parentName:"p"},"counterProviderWithTag.find('tagName')")," to pass an initial argument to your notifier"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"counterProviderWithTag.find(tagName).setArguments('initial argument');\n")),(0,o.kt)("p",null,"Also for ",(0,o.kt)("inlineCode",{parentName:"p"},"StateNotifier")," you can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"withTag")," method but you need to define the generic types"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"final loginProviderWithTag = StateProvider.withTag<LoginController, LoginState>(\n  (_) => LoginController(),\n);\n")),(0,o.kt)("div",{className:"admonition admonition-warning alert alert--danger"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"warning")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"If you want to use the ",(0,o.kt)("inlineCode",{parentName:"p"},"withTag")," method to have the same route open multiple times at the same time with its own state, in that case you should disable the ",(0,o.kt)("inlineCode",{parentName:"p"},"autoDispose")," feature to avoid destroying all your notifiers and ",(0,o.kt)("strong",{parentName:"p"},"handle it manually"),"."),(0,o.kt)("p",{parentName:"div"},"For example using a StatefulWidget."),(0,o.kt)("pre",{parentName:"div"},(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"final loginProviderWithTag = StateProvider.withTag<LoginController, LoginState>(\n  (_) => LoginController(),\n  autoDispose: false,\n);\n\n.\n.\n.\n\n@override\nvoid dispose() {\n  // handle the dispose event manually\n  // check if the provider has a Controller created before\n  final provider = loginProviderWithTag.find('tagName');\n  if (provider.mounted) {\n    provider.dispose();\n  }\n  super.dispose();\n}\n")))))}c.isMDXComponent=!0}}]);