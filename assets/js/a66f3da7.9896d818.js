(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7714],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return c},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),l=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=l(e.components);return r.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=l(n),m=a,h=u["".concat(p,".").concat(m)]||u[m]||d[m]||o;return n?r.createElement(h,i(i({ref:t},c),{},{components:n})):r.createElement(h,i({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},1465:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return i},metadata:function(){return s},toc:function(){return p},default:function(){return c}});var r=n(2122),a=n(9756),o=(n(7294),n(3905)),i={},s={unversionedId:"dependency-injection",id:"dependency-injection",isDocsHomePage:!1,title:"Dependency Injection",description:"Consider the following class that defines the basic structure for a login using the repository pattern:",source:"@site/docs/dependency-injection.md",sourceDirName:".",slug:"/dependency-injection",permalink:"/docs/dependency-injection",editUrl:"https://github.com/darwin-morocho/flutter-meedu/edit/master/website/docs/dependency-injection.md",version:"current",lastUpdatedBy:"darwin-morocho",lastUpdatedAt:1697062063,formattedLastUpdatedAt:"10/11/2023",frontMatter:{},sidebar:"mySidebar",previous:{title:"Hooks",permalink:"/docs/hooks"},next:{title:"Persistent state",permalink:"/docs/persistent-state"}},p=[{value:"Working with arguments",id:"working-with-arguments",children:[]},{value:"FactoryProvider",id:"factoryprovider",children:[]},{value:"Factory with arguments",id:"factory-with-arguments",children:[]},{value:"TIP",id:"tip",children:[]}],l={toc:p};function c(e){var t=e.components,n=(0,a.Z)(e,["components"]);return(0,o.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Consider the following class that defines the basic structure for a login using the repository pattern:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"abstract class AuthRepository{\n  Future<String?> login(String email, String password);\n}\n")),(0,o.kt)("p",null,"Now, we define a class that implements our repository:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"class AuthRepositoryImpl implements AuthRepository{\n\n  AuthRepositoryImpl(this._dio);\n\n  final Dio _dio;\n\n  @override\n  Future<String?> login(String email, String password) async {\n    final response = await _dio.post(\n      ..\n      .\n      .\n    );\n    return someData;\n  }\n}\n")),(0,o.kt)("p",null,"Next, we need to use our ",(0,o.kt)("inlineCode",{parentName:"p"},"AuthRepository")," in a way that makes our code maintainable and testable. In this case, we can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"Provider")," class to create an instance of ",(0,o.kt)("inlineCode",{parentName:"p"},"AuthRepository"),"."),(0,o.kt)("p",null,"We define our repository as a global variable:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"final authRepository = Provider<AuthRepository>(\n  (_) => AuthRepositoryImpl(\n    Dio(),\n  ),\n);\n\n")),(0,o.kt)("p",null,"With this, we can now use our repository in our views or notifiers."),(0,o.kt)("p",null,"For example, let's imagine we have a ",(0,o.kt)("inlineCode",{parentName:"p"},"LoginNotifier")," class that extends ",(0,o.kt)("inlineCode",{parentName:"p"},"StateNotifier")," and needs our ",(0,o.kt)("inlineCode",{parentName:"p"},"AuthRepository")," to perform the login action:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart",metastring:"{4}","{4}":!0},"final loginProvider = StateNotifierProvider<LoginNotifier,LoginState>(\n  (_) => LoginNotifier(\n    LoginState(),\n    authRepository.read(),\n  ),\n);\n\n\nclass LoginNotifier extends StateNotifier<LoginState>{\n  LoginNotifier(super.initialState, this._repository);\n  final AuthRepository _repository;\n\n  Future<String?> login() async {\n      /// SOME CODE HERE\n  }\n}\n\n")),(0,o.kt)("p",null,"Now, if we want to write the respective test, we'll notice that we need to mock the behavior of the Dio class. For this, we simply use the ",(0,o.kt)("inlineCode",{parentName:"p"},"overrideCreator")," function:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"\nsetUp(\n  (){\n    authRepository.overrideCreator(\n      (_) => AuthRepositoryImpl(\n        DioMock(), // mocked data\n      ),\n    );\n  },\n);\n")),(0,o.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Unlike the ",(0,o.kt)("inlineCode",{parentName:"p"},"StateNotifierProvider")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"StateNotifierArgumentsProvider")," classes, the ",(0,o.kt)("inlineCode",{parentName:"p"},"auto-dispose")," feature is not available for the ",(0,o.kt)("inlineCode",{parentName:"p"},"Provider")," class and its variants such as ",(0,o.kt)("inlineCode",{parentName:"p"},"ArgumentsProvider"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"FactoryProvider"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"FactoryArgumentsProvider"),". You must manually release the resources of these classes using the ",(0,o.kt)("inlineCode",{parentName:"p"},"dispose")," function."),(0,o.kt)("p",{parentName:"div"},"For example, if we update the definition of our ",(0,o.kt)("inlineCode",{parentName:"p"},"authRepository")," to execute code for resource cleanup, this would be the result:"),(0,o.kt)("pre",{parentName:"div"},(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"final authRepository = Provider<AuthRepository>(\n  (ref) {\n    final repo = AuthRepositoryImpl(\n      Dio(),\n    );\n\n    ref.onDispose(\n      (){\n          /// YOUR CODE HERE\n      },\n    );\n\n    return repo;\n\n  },\n);\n\n.\n.\n.\n\n// to delete the element created by our authRepository we need to call to dispose\nauthRepository.dispose()\n")))),(0,o.kt)("h2",{id:"working-with-arguments"},"Working with arguments"),(0,o.kt)("p",null,"If you need to provide some values before the provider creates your data, you can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"ArgumentsProvider")," class."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"final authRepository = ArgumentsProvider<AuthRepository, Dio>(\n  (ref) => AuthRepositoryImpl(\n    ref.arguments, //  ref.arguments is an instace of Dio\n  ),\n);\n\n\n //  OR\n\n\nfinal authRepository = Provider.withArguments<AuthRepository, Dio>(\n  (ref) => AuthRepositoryImpl(\n    ref.arguments, //  ref.arguments is an instace of Dio\n  ),\n);\n")),(0,o.kt)("p",null,"Now you can pass an instance of Dio as an argument using setArguments."),(0,o.kt)("p",null,"For example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"\nvoid main(){\n  initializeDependencies( Dio() );\n  // SOME ADITIONAL CODE\n}\n\nvoid initializeDependencies({\n  required Dio dio,\n}){\n  authRepository.setArguments(dio);\n}\n\n")),(0,o.kt)("h2",{id:"factoryprovider"},"FactoryProvider"),(0,o.kt)("p",null,"If every time we retrieve the data from a provider, we need that data to always be a ",(0,o.kt)("inlineCode",{parentName:"p"},"new instance"),", we should use the ",(0,o.kt)("inlineCode",{parentName:"p"},"FactoryProvider")," class."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"final authRepository = FactoryProvider<AuthRepository>(\n  (ref) => AuthRepositoryImpl(\n    Dio(),\n  ),\n);\n")),(0,o.kt)("p",null,"Now, to retrieve the data of type ",(0,o.kt)("inlineCode",{parentName:"p"},"AuthRepository")," from our global variable ",(0,o.kt)("inlineCode",{parentName:"p"},"authRepository"),", we must use the ",(0,o.kt)("inlineCode",{parentName:"p"},"get")," function."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"authRepository.get();\n")),(0,o.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"One instance of ",(0,o.kt)("inlineCode",{parentName:"p"},"FactoryProvider")," does not have a ",(0,o.kt)("inlineCode",{parentName:"p"},"dispose")," function because every time we call get, we receive a new instance. In this case, the ",(0,o.kt)("inlineCode",{parentName:"p"},"get")," function returns an instance of ",(0,o.kt)("inlineCode",{parentName:"p"},"FactoryElement"),", and this class contains the ",(0,o.kt)("inlineCode",{parentName:"p"},"dispose")," function."),(0,o.kt)("p",{parentName:"div"},"Example:"),(0,o.kt)("pre",{parentName:"div"},(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"final authRepository = FactoryProvider<AuthRepository>(\n  (ref) {\n    final repo = AuthRepositoryImpl(\n      Dio(),\n    );\n    ref.onDispose(\n      (){\n       /// YOUR CODE HERE\n      },\n    );\n    return repo;\n  },\n);\n.\n.\n.\n// get the AuthRepository instance\nfinal element = authRepository.get();\n.\n.\n.\n// dipose\nelement.dispose();\n")))),(0,o.kt)("h2",{id:"factory-with-arguments"},"Factory with arguments"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"FactoryArgumentsProvider")," works similarly to ",(0,o.kt)("inlineCode",{parentName:"p"},"FactoryProvider")," but also allows us to pass arguments to be retrieved inside the creator callback."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"final myRepo = FactoryArgumentsProvider<MyRepo, String>(\n  (ref) => MyRepo(\n      ref.arguments, // here ref.arguments is a Strung\n  ),\n);\n\n// OR\n\n\nfinal myRepo = FactoryProvider.withArguments<MyRepo, String>(\n  (ref) => MyRepo(\n      ref.arguments, // here ref.arguments is a Strung\n  ),\n);\n")),(0,o.kt)("h2",{id:"tip"},"TIP"),(0,o.kt)("p",null,"Instead of defining our repositories as global variables, we can define them as static data, achieving the same result but with much more readable code."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"class Repositories{\n  Repositories._(); // Use an internal constructor to restrict the creation of instances of Repositories \n\n  static final auth = Provider<AuthRepository>(\n    (_) => AuthRepositoryImpl(\n      Dio(),\n    ),\n  );\n}\n\n.\n.\n.\n// Now we can use\nRepositories.auth.read();\n\n// or if we are using factories\nRepositories.auth.get();\n")))}c.isMDXComponent=!0}}]);