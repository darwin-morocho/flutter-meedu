(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9319],{3905:function(e,n,r){"use strict";r.d(n,{Zo:function(){return p},kt:function(){return m}});var t=r(7294);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function i(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function a(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?i(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function l(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},i=Object.keys(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=t.createContext({}),s=function(e){var n=t.useContext(c),r=n;return e&&(r="function"==typeof e?e(n):a(a({},n),e)),r},p=function(e){var n=s(e.components);return t.createElement(c.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},u=t.forwardRef((function(e,n){var r=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=s(r),m=o,g=u["".concat(c,".").concat(m)]||u[m]||d[m]||i;return r?t.createElement(g,a(a({ref:n},p),{},{components:r})):t.createElement(g,a({ref:n},p))}));function m(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=u;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var s=2;s<i;s++)a[s]=r[s];return t.createElement.apply(null,a)}return t.createElement.apply(null,r)}u.displayName="MDXCreateElement"},8339:function(e,n,r){"use strict";r.r(n),r.d(n,{frontMatter:function(){return a},metadata:function(){return l},toc:function(){return c},default:function(){return p}});var t=r(2122),o=r(9756),i=(r(7294),r(3905)),a={sidebar_position:8},l={unversionedId:"state-managment/testing",id:"version-4.x.x/state-managment/testing",isDocsHomePage:!1,title:"Testing",description:"Overriding providers",source:"@site/versioned_docs/version-4.x.x/state-managment/testing.md",sourceDirName:"state-managment",slug:"/state-managment/testing",permalink:"/docs/4.x.x/state-managment/testing",editUrl:"https://github.com/darwin-morocho/flutter-meedu/edit/master/website/versioned_docs/version-4.x.x/state-managment/testing.md",version:"4.x.x",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"version-4.x.x/mySidebar",previous:{title:"Listen when a provider has disposed a Notifier",permalink:"/docs/4.x.x/state-managment/listen-when-a-provider-dispose-a-notifier"},next:{title:"Dependency Injection",permalink:"/docs/4.x.x/dependency-injection"}},c=[{value:"Overriding providers",id:"overriding-providers",children:[]},{value:"Cleaning your providers",id:"cleaning-your-providers",children:[]}],s={toc:c};function p(e){var n=e.components,r=(0,o.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,t.Z)({},s,r,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"overriding-providers"},"Overriding providers"),(0,i.kt)("p",null,"Consider the next provider"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-dart"},"final loginProvider = StateProvider<LoginController, LoginState>(\n  (_) => LoginController(),\n);\n")),(0,i.kt)("p",null,"So, maybe in one test you need mock the LoginController behavior then you can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"overrideProvider")," method."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-dart"},"import 'package:mocktail/mocktail.dart';\n\nfinal loginProvider = StateProvider<LoginController, LoginState>(\n  (_) => LoginController(),\n);\n\nclass MockLoginController extends Mock implements LoginController {}\n")),(0,i.kt)("p",null,"Next before your test you can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"setUp")," method."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-dart"},"setUp((){\n  loginProvider.overrideProvider(\n    (_) => MockLoginController(),\n  );\n});\n")),(0,i.kt)("h2",{id:"cleaning-your-providers"},"Cleaning your providers"),(0,i.kt)("p",null,"Before or after each test you will need the default state of all SimpleNotifier or StateNotifier. So you can use ",(0,i.kt)("inlineCode",{parentName:"p"},"ProviderScope.clear();")," to clear all provider saved in the ProviderScope."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-dart"},"setUp((){\n  ProviderScope.clear();\n});\n\nor \n\n\ntearDown((){\n  ProviderScope.clear();\n});\n")))}p.isMDXComponent=!0}}]);