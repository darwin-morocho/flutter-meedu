(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3686],{3905:function(e,t,r){"use strict";r.d(t,{Zo:function(){return l},kt:function(){return m}});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=n.createContext({}),p=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},l=function(e){var t=p(e.components);return n.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=p(r),m=o,f=u["".concat(c,".").concat(m)]||u[m]||d[m]||a;return r?n.createElement(f,i(i({ref:t},l),{},{components:r})):n.createElement(f,i({ref:t},l))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=u;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var p=2;p<a;p++)i[p]=r[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},3886:function(e,t,r){"use strict";r.r(t),r.d(t,{frontMatter:function(){return i},metadata:function(){return s},toc:function(){return c},default:function(){return l}});var n=r(2122),o=r(9756),a=(r(7294),r(3905)),i={sidebar_position:9},s={unversionedId:"state-management/testing",id:"state-management/testing",isDocsHomePage:!1,title:"Testing",description:"Cleaning your providers",source:"@site/docs/state-management/testing.md",sourceDirName:"state-management",slug:"/state-management/testing",permalink:"/docs/state-management/testing",editUrl:"https://github.com/darwin-morocho/flutter-meedu/edit/master/website/docs/state-management/testing.md",version:"current",lastUpdatedBy:"darwin-morocho",lastUpdatedAt:1697048754,formattedLastUpdatedAt:"10/11/2023",sidebarPosition:9,frontMatter:{sidebar_position:9},sidebar:"mySidebar",previous:{title:"Listen when a provider has disposed a Notifier",permalink:"/docs/state-management/listen-when-a-provider-dispose-a-notifier"},next:{title:"Hooks",permalink:"/docs/hooks"}},c=[{value:"Cleaning your providers",id:"cleaning-your-providers",children:[]},{value:"Overriding providers",id:"overriding-providers",children:[]}],p={toc:c};function l(e){var t=e.components,r=(0,o.Z)(e,["components"]);return(0,a.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"cleaning-your-providers"},"Cleaning your providers"),(0,a.kt)("p",null,"Before or after each test you will need the default state of all ",(0,a.kt)("inlineCode",{parentName:"p"},"StateNotifier")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"Bloc"),". So you can use ",(0,a.kt)("inlineCode",{parentName:"p"},"ProvidersContainer.clear();")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"setUp((){\n  ProviderScope.clear();\n});\n\nor\n\n\ntearDown((){\n  ProviderScope.clear();\n});\n")),(0,a.kt)("h2",{id:"overriding-providers"},"Overriding providers"),(0,a.kt)("p",null,"Consider the next provider"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"final loginProvider = Provider.state<LoginNotifier, LoginState>(\n  (_) => LoginNotifier(\n    LoginState(),\n    someRepo: SomeRepo(),\n  ),\n);\n")),(0,a.kt)("p",null,"Sometimes, for our unit tests or widget tests, we need to mock the behavior of a certain class. In those cases, we can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"overrideCreator")," function to override the way our provider creates our notifiers."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"class MockSomeRepo extends Mock implements SomeRepo {}\n")),(0,a.kt)("p",null,"Next before your test you can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"setUp")," method."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart",metastring:"{5}","{5}":!0},"setUp((){\n  loginProvider.overrideCreator(\n    (_) => LoginNotifier(\n      LoginState(),\n      someRepo: MockSomeRepo(), // mocked repo\n    ),\n  );\n\n});\n")))}l.isMDXComponent=!0}}]);