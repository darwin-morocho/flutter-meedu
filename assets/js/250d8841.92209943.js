(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[359],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return l},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=r.createContext({}),c=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=c(e.components);return r.createElement(u.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,u=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=c(n),m=a,f=p["".concat(u,".").concat(m)]||p[m]||d[m]||o;return n?r.createElement(f,i(i({ref:t},l),{},{components:n})):r.createElement(f,i({ref:t},l))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=p;var s={};for(var u in t)hasOwnProperty.call(t,u)&&(s[u]=t[u]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},3499:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return i},metadata:function(){return s},toc:function(){return u},default:function(){return l}});var r=n(2122),a=n(9756),o=(n(7294),n(3905)),i={sidebar_position:6},s={unversionedId:"state-management/working-with-tags",id:"state-management/working-with-tags",isDocsHomePage:!1,title:"Working with tags",description:"If you need to have multiple notifiers using the same StateNotifier or Bloc class, but you don't want to create a provider for each notifier, you can use the tag parameter when you call the read function of our providers.",source:"@site/docs/state-management/working-with-tags.md",sourceDirName:"state-management",slug:"/state-management/working-with-tags",permalink:"/docs/state-management/working-with-tags",editUrl:"https://github.com/darwin-morocho/flutter-meedu/edit/master/website/docs/state-management/working-with-tags.md",version:"current",lastUpdatedBy:"darwin-morocho",lastUpdatedAt:1697048754,formattedLastUpdatedAt:"10/11/2023",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"mySidebar",previous:{title:"Working with arguments",permalink:"/docs/state-management/working-with-arguments"},next:{title:"Listen when a provider has disposed a Notifier",permalink:"/docs/state-management/listen-when-a-provider-dispose-a-notifier"}},u=[{value:"How to Set Arguments for Our Notifiers",id:"how-to-set-arguments-for-our-notifiers",children:[]},{value:"Tags and filters",id:"tags-and-filters",children:[]}],c={toc:u};function l(e){var t=e.components,n=(0,a.Z)(e,["components"]);return(0,o.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"If you need to have multiple notifiers using the same ",(0,o.kt)("inlineCode",{parentName:"p"},"StateNotifier")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"Bloc")," class, but you don't want to create a provider for each notifier, you can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"tag")," parameter when you call the ",(0,o.kt)("inlineCode",{parentName:"p"},"read")," function of our providers."),(0,o.kt)("p",null,"Consider the following example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"final counterProvider = StateNotifierProvider<CounterNotifier, int>(\n  (_) => CounterNotifier(0),\n);\n\nclass CounterNotifier extends StateNotifier<int> {\n  CounterNotifier(super.initialState);\n\n  void increment() {\n    state++;\n  }\n}\n")),(0,o.kt)("p",null,"Now we can use a single ",(0,o.kt)("inlineCode",{parentName:"p"},"Consumer")," widget to create two different instances of ",(0,o.kt)("inlineCode",{parentName:"p"},"CounterNotifier")," using the same provider."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"class CounterWidget extends StatelessWidget {\n  const CounterWidget({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: Column(\n        children: [\n          Consumer(\n            builder: (_, ref, __) {\n              final counter1 = ref.watch(counterProvider, tag: '1').state;\n              final counter2 = ref.watch(counterProvider, tag: '2').state;\n              return Text('counter1=$counter1, counter2=$counter2');\n            },\n          ),\n          TextButton(\n            onPressed: () => counterProvider.read(tag: '1').increment(),\n            child: Text('increment counter 1'),\n          ),\n          TextButton(\n            onPressed: () => counterProvider.read(tag: '2').increment(),\n            child: Text('increment counter 2'),\n          ),\n        ],\n      ),\n    );\n  }\n}\n")),(0,o.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"In the example above, we have created 2 instances of ",(0,o.kt)("inlineCode",{parentName:"p"},"CounterNotifier")," by using tags, and each of these instances has its own state."),(0,o.kt)("p",{parentName:"div"},"NOTE: If you need to manually dispose of your notifiers that were created using tags, you can use"),(0,o.kt)("pre",{parentName:"div"},(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"yourProvider.dispose(tag:'YOUR_TAG');\n")))),(0,o.kt)("h2",{id:"how-to-set-arguments-for-our-notifiers"},"How to Set Arguments for Our Notifiers"),(0,o.kt)("p",null,"When you call the setArguments function of our StateNotifierArgumentsProvider, you can use the tag argument."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"final counterProvider = StateNotifierProvider.withArguments<CounterNotifier, int, int>(\n  (ref) => CounterNotifier(ref.arguments), // ref.arguments is an int\n);\n\ncounterProvider.setArguments(\n  100,\n  tag: '1',\n);\n")),(0,o.kt)("h2",{id:"tags-and-filters"},"Tags and filters"),(0,o.kt)("p",null,"If you use ",(0,o.kt)("inlineCode",{parentName:"p"},"ref.watch")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"ref.listen")," with filters like ",(0,o.kt)("inlineCode",{parentName:"p"},".select")," or ",(0,o.kt)("inlineCode",{parentName:"p"},".when"),", the ",(0,o.kt)("inlineCode",{parentName:"p"},"tag")," parameter of ",(0,o.kt)("inlineCode",{parentName:"p"},"ref.watch")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"ref.listen")," will be omitted, as the filters have their own ",(0,o.kt)("inlineCode",{parentName:"p"},"tag")," parameter."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dart"},"Consumer(\n  builder: (_, ref, __){\n    final notifier = ref.watch(\n      myProvider.select(\n        (state) => state.value,\n        tag: 'myTag',\n      ),\n    );\n    \n    YOUR_CODE\n  },\n)\n")))}l.isMDXComponent=!0}}]);